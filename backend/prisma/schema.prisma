// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - stores authentication and profile data
model User {
  id                String    @id @default(uuid())
  username          String    @unique
  password          String
  avatarPokemonId   Int       @default(25) // Default to Pikachu
  avatarSprite      String    @default("https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  pokedex           Pokedex?
  gameStats         GameStats?
  endlessScores     EndlessScore[]
  dailyChallengeScores DailyChallengeScore[]

  @@index([username])
}

// Pokedex model - tracks unlocked Pokemon for each user
model Pokedex {
  id                   String   @id @default(uuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Arrays to store unlocked Pokemon IDs
  unlockedPokemon      Int[]    @default([])
  unlockedShinyPokemon Int[]    @default([])
  
  // JSON fields for counts (stored as {pokemonId: count})
  pokemonCounts        Json     @default("{}")
  shinyPokemonCounts   Json     @default("{}")
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
}

// GameStats model - tracks overall game statistics
model GameStats {
  id                   String   @id @default(uuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  totalBattles         Int      @default(0)
  totalCorrectGuesses  Int      @default(0)
  highestStreak        Int      @default(0)
  endlessHighScore     Int      @default(0)
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
}

// EndlessScore model - stores individual endless mode runs
model EndlessScore {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  score       Int
  timestamp   DateTime @default(now())

  @@index([userId])
  @@index([score(sort: Desc)])
}

// DailyChallengeScore model - stores daily challenge attempts
model DailyChallengeScore {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  challengeDate DateTime @db.Date
  score         Int      // Lower is better for daily challenges
  attempts      Int      @default(1)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, challengeDate])
  @@index([userId])
  @@index([challengeDate])
  @@index([score])
}

// PokemonInstance model - stores complete Pokemon data for battles
model PokemonInstance {
  id              String   @id @default(uuid())
  
  // Basic info
  pokemonId       Int
  name            String
  level           Int
  
  // Types
  types           String[] // ["fire", "flying"]
  
  // Stats (calculated with IVs, EVs, nature)
  hp              Int
  attack          Int
  defense         Int
  specialAttack   Int
  specialDefense  Int
  speed           Int
  
  // Battle details
  ability         String
  abilityName     String
  item            String?
  itemName        String?
  nature          String
  
  // Moves
  moves           Json     // Array of move objects with details
  
  // IVs and EVs
  ivs             Json     // {hp: 31, attack: 31, ...}
  evs             Json     // {hp: 0, attack: 0, ...}
  
  // Visual
  sprite          String
  spriteBack      String?
  isShiny         Boolean  @default(false)
  
  // Future expansion
  gender          String?  // "M", "F", or null
  teraType        String?  // For future generations
  dynamaxLevel    Int?     // For future features
  customData      Json?    // Flexible field for future additions
  
  createdAt       DateTime @default(now())
  
  // Relations
  battlesAsPokemon1 Battle[] @relation("Pokemon1")
  battlesAsPokemon2 Battle[] @relation("Pokemon2")

  @@index([pokemonId])
  @@index([createdAt])
}

// Battle model - stores battle results and aggregate user predictions
model Battle {
  id              String   @id @default(uuid())
  
  // Link to actual Pokemon instances used
  pokemon1Id      String
  pokemon1        PokemonInstance @relation("Pokemon1", fields: [pokemon1Id], references: [id])
  
  pokemon2Id      String
  pokemon2        PokemonInstance @relation("Pokemon2", fields: [pokemon2Id], references: [id])
  
  // Battle simulation results
  winRate         Float    // Pokemon 1's win rate (0-1)
  totalBattles    Int      // Number of simulations (100)
  executionTime   Int?     // Milliseconds to run simulation
  
  // User prediction statistics
  totalGuesses    Int      @default(0)  // How many users have guessed
  correctGuesses  Int      @default(0)  // How many guessed correctly (within 10%)
  avgGuessPercent Float?   // Average user guess for Pokemon 1 win rate
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([pokemon1Id, pokemon2Id]) // Prevent duplicate battles
  @@index([pokemon1Id, pokemon2Id])
  @@index([totalGuesses]) // For finding popular battles
}
